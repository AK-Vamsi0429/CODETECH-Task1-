// alu.v
module ALU (
    input  [3:0] A,
    input  [3:0] B,
    input  [2:0] ALU_Sel, // Selector
    output reg [3:0] ALU_Out,
    output reg CarryOut
);

always @(*) begin
    case (ALU_Sel)
        3'b000: {CarryOut, ALU_Out} = A + B;      // Addition
        3'b001: {CarryOut, ALU_Out} = A - B;      // Subtraction
        3'b010: ALU_Out = A & B;                  // AND
        3'b011: ALU_Out = A | B;                  // OR
        3'b100: ALU_Out = ~A;                     // NOT A
        default: ALU_Out = 4'b0000;
    endcase
end

endmodule
// tb_alu.v
`timescale 1ns / 1ps
module tb_ALU;

reg  [3:0] A, B;
reg  [2:0] ALU_Sel;
wire [3:0] ALU_Out;
wire CarryOut;

ALU uut (
    .A(A),
    .B(B),
    .ALU_Sel(ALU_Sel),
    .ALU_Out(ALU_Out),
    .CarryOut(CarryOut)
);

initial begin
    // Monitor the changes
    $monitor("Time: %0t | A=%b B=%b Sel=%b => Out=%b Carry=%b", 
              $time, A, B, ALU_Sel, ALU_Out, CarryOut);

    // Test ADD
    A = 4'b0101; B = 4'b0011; ALU_Sel = 3'b000; #10;

    // Test SUB
    A = 4'b0101; B = 4'b0001; ALU_Sel = 3'b001; #10;

    // Test AND
    A = 4'b1100; B = 4'b1010; ALU_Sel = 3'b010; #10;

    // Test OR
    A = 4'b1100; B = 4'b1010; ALU_Sel = 3'b011; #10;

    // Test NOT
    A = 4'b1100; ALU_Sel = 3'b100; #10;

    $finish;
end

endmodule
